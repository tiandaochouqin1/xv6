From c8ba14a0ff2596bf805a4377c8a934def41997e0 Mon Sep 17 00:00:00 2001
From: 6-1 <xv6@xv6.com>
Date: Fri, 3 Sep 2021 00:52:57 +0800
Subject: [PATCH 4/4] add pagealloc to boot_init

---
 kern/pmap.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/kern/pmap.c b/kern/pmap.c
index 8c809f1..bbb8609 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -86,7 +86,8 @@ boot_alloc(uint32_t n)
 {
 	static char *nextfree;	// virtual address of next byte of free memory
 	char *result;
-
+    int pagenum = 0;
+    struct PageInfo * tpage;
 	// Initialize nextfree if this is the first time.
 	// 'end' is a magic symbol automatically generated by the linker,
 	// which points to the end of the kernel's bss segment:
@@ -102,8 +103,24 @@ boot_alloc(uint32_t n)
 	// to a multiple of PGSIZE.
 	//
 	// LAB 2: Your code here.
-
-	return NULL;
+    pagenum = n/PGSIZE + 1; 
+    if((int) (pagenum*PGSIZE + nextfree) >= 0xeebfd000){
+        panic("out of mem\n");
+    }
+
+    for(int loop = 0; loop < pagenum; loop++){
+       tpage = page_alloc(ALLOC_ZERO); 
+       tpage->pp_ref ++;
+    }
+    if(n == 0){
+        result = (char*) tpage->pp_link;
+    }
+    else{
+        result = nextfree;
+        nextfree += pagenum * PGSIZE;
+    }
+
+	return result;
 }
 
 // Set up a two-level page table:
@@ -125,7 +142,7 @@ mem_init(void)
 	i386_detect_memory();
 
 	// Remove this line when you're ready to test this function.
-	panic("mem_init: This function is not finished\n");
+//	panic("mem_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
-- 
2.17.1

