From ddd89ab61b69c47ec109c00769994ba22450d38a Mon Sep 17 00:00:00 2001
From: 6-1 <xv6@xv6.com>
Date: Mon, 23 Aug 2021 22:48:45 +0800
Subject: [PATCH 1/4] 1. oct num format in vprintfmt 2. backtrace with more
 info

others:
1) gitignore
2) symbol table of init.c
3) vim session
---
 .gitignore     |   2 +
 init.d         |   2 +
 init.sym       | 378 +++++++++++++++++++++++++++++++
 kern/kdebug.c  |   6 +-
 kern/monitor.c |  16 +-
 lib/printfmt.c |   8 +-
 xv6.session    | 591 +++++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 997 insertions(+), 6 deletions(-)
 create mode 100644 init.d
 create mode 100644 init.sym
 create mode 100644 xv6.session

diff --git a/.gitignore b/.gitignore
index 85c53b8..1c9827b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,5 @@
 /sol?/
 /myapi.key
 /.suf
+cscope.*
+tags
diff --git a/init.d b/init.d
new file mode 100644
index 0000000..a9c7591
--- /dev/null
+++ b/init.d
@@ -0,0 +1,2 @@
+init.o: kern/init.c inc/stdio.h inc/stdarg.h inc/string.h inc/types.h \
+ inc/assert.h kern/monitor.h kern/console.h
diff --git a/init.sym b/init.sym
new file mode 100644
index 0000000..8319227
--- /dev/null
+++ b/init.sym
@@ -0,0 +1,378 @@
+	.file	"init.c"
+	.stabs	"kern/init.c",100,0,2,.Ltext0
+	.text
+.Ltext0:
+	.stabs	"gcc2_compiled.",60,0,0,0
+	.stabs	"int:t(0,1)=r(0,1);-2147483648;2147483647;",128,0,0,0
+	.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
+	.stabs	"long int:t(0,3)=r(0,3);-0;4294967295;",128,0,0,0
+	.stabs	"unsigned int:t(0,4)=r(0,4);0;4294967295;",128,0,0,0
+	.stabs	"long unsigned int:t(0,5)=r(0,5);0;-1;",128,0,0,0
+	.stabs	"__int128:t(0,6)=r(0,6);0;-1;",128,0,0,0
+	.stabs	"__int128 unsigned:t(0,7)=r(0,7);0;-1;",128,0,0,0
+	.stabs	"long long int:t(0,8)=r(0,8);-0;4294967295;",128,0,0,0
+	.stabs	"long long unsigned int:t(0,9)=r(0,9);0;-1;",128,0,0,0
+	.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
+	.stabs	"short unsigned int:t(0,11)=r(0,11);0;65535;",128,0,0,0
+	.stabs	"signed char:t(0,12)=r(0,12);-128;127;",128,0,0,0
+	.stabs	"unsigned char:t(0,13)=r(0,13);0;255;",128,0,0,0
+	.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
+	.stabs	"double:t(0,15)=r(0,1);8;0;",128,0,0,0
+	.stabs	"long double:t(0,16)=r(0,1);16;0;",128,0,0,0
+	.stabs	"_Float32:t(0,17)=r(0,1);4;0;",128,0,0,0
+	.stabs	"_Float64:t(0,18)=r(0,1);8;0;",128,0,0,0
+	.stabs	"_Float128:t(0,19)=r(0,1);16;0;",128,0,0,0
+	.stabs	"_Float32x:t(0,20)=r(0,1);8;0;",128,0,0,0
+	.stabs	"_Float64x:t(0,21)=r(0,1);16;0;",128,0,0,0
+	.stabs	"_Decimal32:t(0,22)=r(0,1);4;0;",128,0,0,0
+	.stabs	"_Decimal64:t(0,23)=r(0,1);8;0;",128,0,0,0
+	.stabs	"_Decimal128:t(0,24)=r(0,1);16;0;",128,0,0,0
+	.stabs	"void:t(0,25)=(0,25)",128,0,0,0
+	.stabs	"./inc/stdio.h",130,0,0,0
+	.stabs	"./inc/stdarg.h",130,0,0,0
+	.stabs	"va_list:t(2,1)=(2,2)=(2,3)=ar(2,4)=r(2,4);0;-1;;0;0;(2,5)=xs__va_list_tag:",128,0,0,0
+	.stabn	162,0,0,0
+	.stabn	162,0,0,0
+	.stabs	"./inc/string.h",130,0,0,0
+	.stabs	"./inc/types.h",130,0,0,0
+	.stabs	"bool:t(4,1)=(4,2)=eFalse:0,True:1,;",128,0,0,0
+	.stabs	" :T(4,3)=efalse:0,true:1,;",128,0,0,0
+	.stabs	"int8_t:t(4,4)=(0,12)",128,0,0,0
+	.stabs	"uint8_t:t(4,5)=(0,13)",128,0,0,0
+	.stabs	"int16_t:t(4,6)=(0,10)",128,0,0,0
+	.stabs	"uint16_t:t(4,7)=(0,11)",128,0,0,0
+	.stabs	"int32_t:t(4,8)=(0,1)",128,0,0,0
+	.stabs	"uint32_t:t(4,9)=(0,4)",128,0,0,0
+	.stabs	"int64_t:t(4,10)=(0,8)",128,0,0,0
+	.stabs	"uint64_t:t(4,11)=(0,9)",128,0,0,0
+	.stabs	"intptr_t:t(4,12)=(4,8)",128,0,0,0
+	.stabs	"uintptr_t:t(4,13)=(4,9)",128,0,0,0
+	.stabs	"physaddr_t:t(4,14)=(4,9)",128,0,0,0
+	.stabs	"ppn_t:t(4,15)=(4,9)",128,0,0,0
+	.stabs	"size_t:t(4,16)=(4,9)",128,0,0,0
+	.stabs	"ssize_t:t(4,17)=(4,8)",128,0,0,0
+	.stabs	"off_t:t(4,18)=(4,8)",128,0,0,0
+	.stabn	162,0,0,0
+	.stabn	162,0,0,0
+	.section	.rodata.str1.1,"aMS",@progbits,1
+.LC0:
+	.string	"entering test_backtrace %d\n"
+.LC1:
+	.string	"leaving test_backtrace %d\n"
+	.text
+	.p2align 4,,15
+	.stabs	"test_backtrace:F(0,25)",36,0,0,test_backtrace
+	.stabs	"x:P(0,1)",64,0,0,3
+	.globl	test_backtrace
+	.type	test_backtrace, @function
+test_backtrace:
+	.stabn	68,0,13,.LM0-.LFBB1
+.LM0:
+.LFBB1:
+.LFB0:
+	.cfi_startproc
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	.stabn	68,0,14,.LM1-.LFBB1
+.LM1:
+	movl	%edi, %esi
+	.stabn	68,0,13,.LM2-.LFBB1
+.LM2:
+	movl	%edi, %ebx
+	.stabn	68,0,14,.LM3-.LFBB1
+.LM3:
+	leaq	.LC0(%rip), %rdi
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	.stabn	68,0,15,.LM4-.LFBB1
+.LM4:
+	testl	%ebx, %ebx
+	jg	.L6
+	.stabn	68,0,18,.LM5-.LFBB1
+.LM5:
+	xorl	%edx, %edx
+	xorl	%esi, %esi
+	xorl	%edi, %edi
+	call	mon_backtrace@PLT
+.L3:
+	.stabn	68,0,19,.LM6-.LFBB1
+.LM6:
+	movl	%ebx, %esi
+	leaq	.LC1(%rip), %rdi
+	xorl	%eax, %eax
+	.stabn	68,0,20,.LM7-.LFBB1
+.LM7:
+	popq	%rbx
+	.cfi_remember_state
+	.cfi_def_cfa_offset 8
+	.stabn	68,0,19,.LM8-.LFBB1
+.LM8:
+	jmp	cprintf@PLT
+	.p2align 4,,10
+	.p2align 3
+.L6:
+	.cfi_restore_state
+	.stabn	68,0,16,.LM9-.LFBB1
+.LM9:
+	leal	-1(%rbx), %edi
+	call	test_backtrace
+	jmp	.L3
+	.cfi_endproc
+.LFE0:
+	.size	test_backtrace, .-test_backtrace
+.Lscope1:
+	.section	.rodata.str1.1
+.LC2:
+	.string	"6828 decimal is %o octal!\n"
+	.text
+	.p2align 4,,15
+	.stabs	"i386_init:F(0,25)",36,0,0,i386_init
+	.globl	i386_init
+	.type	i386_init, @function
+i386_init:
+	.stabn	68,0,24,.LM10-.LFBB2
+.LM10:
+.LFBB2:
+.LFB1:
+	.cfi_startproc
+	.stabn	68,0,30,.LM11-.LFBB2
+.LM11:
+	leaq	edata(%rip), %rdi
+	leaq	end(%rip), %rdx
+	.stabn	68,0,24,.LM12-.LFBB2
+.LM12:
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 16
+	.stabn	68,0,30,.LM13-.LFBB2
+.LM13:
+	xorl	%esi, %esi
+	subq	%rdi, %rdx
+	call	memset@PLT
+	.stabn	68,0,34,.LM14-.LFBB2
+.LM14:
+	call	cons_init@PLT
+	.stabn	68,0,36,.LM15-.LFBB2
+.LM15:
+	leaq	.LC2(%rip), %rdi
+	movl	$6828, %esi
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	.stabn	68,0,39,.LM16-.LFBB2
+.LM16:
+	movl	$5, %edi
+	call	test_backtrace
+	.p2align 4,,10
+	.p2align 3
+.L8:
+	.stabn	68,0,43,.LM17-.LFBB2
+.LM17:
+	xorl	%edi, %edi
+	call	monitor@PLT
+	jmp	.L8
+	.cfi_endproc
+.LFE1:
+	.size	i386_init, .-i386_init
+.Lscope2:
+	.section	.rodata.str1.1
+.LC3:
+	.string	"kernel panic at %s:%d: "
+.LC4:
+	.string	"\n"
+	.text
+	.p2align 4,,15
+	.stabs	"_panic:F(0,25)",36,0,0,_panic
+	.stabs	"file:P(0,26)=*(0,2)",64,0,0,5
+	.stabs	"line:P(0,1)",64,0,0,4
+	.stabs	"fmt:P(0,26)",64,0,0,3
+	.globl	_panic
+	.type	_panic, @function
+_panic:
+	.stabn	68,0,59,.LM18-.LFBB3
+.LM18:
+.LFBB3:
+.LFB2:
+	.cfi_startproc
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	movq	%rdx, %rbx
+	subq	$208, %rsp
+	.cfi_def_cfa_offset 224
+	testb	%al, %al
+	movq	%rcx, 56(%rsp)
+	movq	%r8, 64(%rsp)
+	movq	%r9, 72(%rsp)
+	je	.L11
+	movaps	%xmm0, 80(%rsp)
+	movaps	%xmm1, 96(%rsp)
+	movaps	%xmm2, 112(%rsp)
+	movaps	%xmm3, 128(%rsp)
+	movaps	%xmm4, 144(%rsp)
+	movaps	%xmm5, 160(%rsp)
+	movaps	%xmm6, 176(%rsp)
+	movaps	%xmm7, 192(%rsp)
+.L11:
+	.stabn	68,0,59,.LM19-.LFBB3
+.LM19:
+	movq	%fs:40, %rax
+	movq	%rax, 24(%rsp)
+	xorl	%eax, %eax
+	.stabn	68,0,62,.LM20-.LFBB3
+.LM20:
+	cmpq	$0, panicstr(%rip)
+	je	.L16
+	.p2align 4,,10
+	.p2align 3
+.L13:
+	.stabn	68,0,78,.LM21-.LFBB3
+.LM21:
+	xorl	%edi, %edi
+	call	monitor@PLT
+	jmp	.L13
+.L16:
+	.stabn	68,0,64,.LM22-.LFBB3
+.LM22:
+	movq	%rbx, panicstr(%rip)
+	.stabn	68,0,67,.LM23-.LFBB3
+.LM23:
+#APP
+# 67 "kern/init.c" 1
+	cli; cld
+# 0 "" 2
+	.stabn	68,0,69,.LM24-.LFBB3
+.LM24:
+#NO_APP
+	leaq	224(%rsp), %rax
+	.stabn	68,0,70,.LM25-.LFBB3
+.LM25:
+	movl	%esi, %edx
+	movq	%rdi, %rsi
+	leaq	.LC3(%rip), %rdi
+	.stabn	68,0,69,.LM26-.LFBB3
+.LM26:
+	movl	$24, (%rsp)
+	movl	$48, 4(%rsp)
+	movq	%rax, 8(%rsp)
+	leaq	32(%rsp), %rax
+	movq	%rax, 16(%rsp)
+	.stabn	68,0,70,.LM27-.LFBB3
+.LM27:
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	.stabn	68,0,71,.LM28-.LFBB3
+.LM28:
+	movq	%rbx, %rdi
+	movq	%rsp, %rsi
+	call	vcprintf@PLT
+	.stabn	68,0,72,.LM29-.LFBB3
+.LM29:
+	leaq	.LC4(%rip), %rdi
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	jmp	.L13
+	.cfi_endproc
+.LFE2:
+	.size	_panic, .-_panic
+	.stabs	"ap:(2,1)",128,0,0,0
+	.stabn	192,0,0,.LFBB3-.LFBB3
+	.stabn	224,0,0,.Lscope3-.LFBB3
+.Lscope3:
+	.section	.rodata.str1.1
+.LC5:
+	.string	"kernel warning at %s:%d: "
+	.text
+	.p2align 4,,15
+	.stabs	"_warn:F(0,25)",36,0,0,_warn
+	.stabs	"file:P(0,26)",64,0,0,5
+	.stabs	"line:P(0,1)",64,0,0,4
+	.stabs	"fmt:P(0,26)",64,0,0,3
+	.globl	_warn
+	.type	_warn, @function
+_warn:
+	.stabn	68,0,84,.LM30-.LFBB4
+.LM30:
+.LFBB4:
+.LFB3:
+	.cfi_startproc
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	movq	%rdx, %rbx
+	subq	$208, %rsp
+	.cfi_def_cfa_offset 224
+	testb	%al, %al
+	movq	%rcx, 56(%rsp)
+	movq	%r8, 64(%rsp)
+	movq	%r9, 72(%rsp)
+	je	.L18
+	movaps	%xmm0, 80(%rsp)
+	movaps	%xmm1, 96(%rsp)
+	movaps	%xmm2, 112(%rsp)
+	movaps	%xmm3, 128(%rsp)
+	movaps	%xmm4, 144(%rsp)
+	movaps	%xmm5, 160(%rsp)
+	movaps	%xmm6, 176(%rsp)
+	movaps	%xmm7, 192(%rsp)
+.L18:
+	.stabn	68,0,84,.LM31-.LFBB4
+.LM31:
+	movq	%fs:40, %rax
+	movq	%rax, 24(%rsp)
+	xorl	%eax, %eax
+	.stabn	68,0,87,.LM32-.LFBB4
+.LM32:
+	leaq	224(%rsp), %rax
+	.stabn	68,0,88,.LM33-.LFBB4
+.LM33:
+	movl	%esi, %edx
+	movq	%rdi, %rsi
+	leaq	.LC5(%rip), %rdi
+	.stabn	68,0,87,.LM34-.LFBB4
+.LM34:
+	movq	%rax, 8(%rsp)
+	leaq	32(%rsp), %rax
+	movl	$24, (%rsp)
+	movl	$48, 4(%rsp)
+	movq	%rax, 16(%rsp)
+	.stabn	68,0,88,.LM35-.LFBB4
+.LM35:
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	.stabn	68,0,89,.LM36-.LFBB4
+.LM36:
+	movq	%rsp, %rsi
+	movq	%rbx, %rdi
+	call	vcprintf@PLT
+	.stabn	68,0,90,.LM37-.LFBB4
+.LM37:
+	leaq	.LC4(%rip), %rdi
+	xorl	%eax, %eax
+	call	cprintf@PLT
+	.stabn	68,0,92,.LM38-.LFBB4
+.LM38:
+	movq	24(%rsp), %rax
+	xorq	%fs:40, %rax
+	jne	.L21
+	addq	$208, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 16
+	popq	%rbx
+	.cfi_def_cfa_offset 8
+	ret
+.L21:
+	.cfi_restore_state
+	call	__stack_chk_fail@PLT
+	.cfi_endproc
+.LFE3:
+	.size	_warn, .-_warn
+	.stabs	"ap:(2,1)",128,0,0,0
+	.stabn	192,0,0,.LFBB4-.LFBB4
+	.stabn	224,0,0,.Lscope4-.LFBB4
+.Lscope4:
+	.comm	panicstr,8,8
+	.stabs	"panicstr:G(0,26)",32,0,0,0
+	.stabs	"",100,0,0,.Letext0
+.Letext0:
+	.ident	"GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0"
+	.section	.note.GNU-stack,"",@progbits
diff --git a/kern/kdebug.c b/kern/kdebug.c
index 9547143..64cc75c 100644
--- a/kern/kdebug.c
+++ b/kern/kdebug.c
@@ -179,7 +179,11 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
 	// Your code here.
-
+        stab_binsearch(stabs,&lline,&rline,N_SLINE,addr);
+        if(lline<=rline)
+	{
+		info->eip_line = stabs[lline].n_desc;
+	}
 
 	// Search backwards from the line number for the relevant filename
 	// stab.
diff --git a/kern/monitor.c b/kern/monitor.c
index e137e92..a12f264 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -24,6 +24,7 @@ struct Command {
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+	{ "backtrace", "Display stack info", mon_backtrace},
 };
 
 /***** Implementations of basic kernel monitor commands *****/
@@ -57,7 +58,20 @@ mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
 int
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
-	// Your code here.
+	int* ebp = 0;
+        int ret = -1;
+	struct Eipdebuginfo dbg_info; 
+        memset(&dbg_info, 0, sizeof(struct Eipdebuginfo));
+	for(ebp = (int*) read_ebp(); ebp>0; ebp = (int*)*(ebp))
+	{
+
+		cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", *ebp, *(ebp+4),*(ebp+8),*(ebp+12),*(ebp+16),*(ebp+20), *(ebp+24));
+		ret = debuginfo_eip( ebp[1], &dbg_info);
+		if(ret == 0)
+                {
+			cprintf("%s:%d %.*s+%d\n", dbg_info.eip_file, dbg_info.eip_line, dbg_info.eip_fn_namelen, dbg_info.eip_fn_name, ebp[1]-dbg_info.eip_fn_addr);
+	        }
+	}
 	return 0;
 }
 
diff --git a/lib/printfmt.c b/lib/printfmt.c
index 28e01c9..8c62b04 100644
--- a/lib/printfmt.c
+++ b/lib/printfmt.c
@@ -206,10 +206,10 @@ vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
+			putch('0', putdat);
+			base = 8;
+			num = getuint(&ap, lflag);
+			goto number;
 
 		// pointer
 		case 'p':
diff --git a/xv6.session b/xv6.session
new file mode 100644
index 0000000..d9f6d4e
--- /dev/null
+++ b/xv6.session
@@ -0,0 +1,591 @@
+let SessionLoad = 1
+if &cp | set nocp | endif
+nmap d :cs find d =expand("<cword>")
+nmap i :cs find i ^=expand("<cfile>")$
+nmap f :cs find f =expand("<cfile>")
+nmap e :cs find e =expand("<cword>")
+nmap t :cs find t =expand("<cword>")
+nmap c :cs find c =expand("<cword>")
+nmap g :cs find g =expand("<cword>")
+nmap s :cs find s =expand("<cword>")
+let s:cpo_save=&cpo
+set cpo&vim
+vmap gx <Plug>NetrwBrowseXVis
+nmap gx <Plug>NetrwBrowseX
+nmap ||d :vert scs find d =expand("<cword>")
+nmap ||i :vert scs find i ^=expand("<cfile>")$
+nmap ||f :vert scs find f =expand("<cfile>")
+nmap ||e :vert scs find e =expand("<cword>")
+nmap ||t :vert scs find t =expand("<cword>")
+nmap ||c :vert scs find c =expand("<cword>")
+nmap ||g :vert scs find g =expand("<cword>")
+nmap ||s :vert scs find s =expand("<cword>")
+nmap |d :scs find d =expand("<cword>")
+nmap |i :scs find i ^=expand("<cfile>")$
+nmap |f :scs find f =expand("<cfile>")
+nmap |e :scs find e =expand("<cword>")
+nmap |t :scs find t =expand("<cword>")
+nmap |c :scs find c =expand("<cword>")
+nmap |g :scs find g =expand("<cword>")
+nmap |s :scs find s =expand("<cword>")
+vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
+nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
+let &cpo=s:cpo_save
+unlet s:cpo_save
+set backspace=indent,eol,start
+set cscopetag
+set cscopeverbose
+set fileencodings=ucs-bom,utf-8,default,latin1
+set helplang=en
+set nomodeline
+set printoptions=paper:letter
+set ruler
+set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim80,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
+set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
+set tags=./tags,../tags,../../tags,../../../tags,../../../../tags,tags,/usr/local/etc/systags
+let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
+let v:this_session=expand("<sfile>:p")
+silent only
+cd ~/Desktop/6.828/lab
+if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
+  let s:wipebuf = bufnr('%')
+endif
+set shortmess=aoO
+badd +98 obj/kern/kernel.asm
+badd +63 kern/monitor.c
+badd +18 kern/init.c
+badd +211 inc/x86.h
+badd +41 boot/boot.S
+badd +1 kern/entry.S
+badd +105 kern/kdebug.c
+badd +1 inc/stab.h
+badd +104 inc/memlayout.h
+badd +7 kern/kdebug.h
+argglobal
+silent! argdel *
+$argadd obj/kern/kernel.asm
+set stal=2
+edit kern/monitor.c
+set splitbelow splitright
+set nosplitbelow
+set nosplitright
+wincmd t
+set winminheight=1 winheight=1 winminwidth=1 winwidth=1
+argglobal
+setlocal keymap=
+setlocal noarabic
+setlocal noautoindent
+setlocal backupcopy=
+setlocal balloonexpr=
+setlocal nobinary
+setlocal nobreakindent
+setlocal breakindentopt=
+setlocal bufhidden=
+setlocal buflisted
+setlocal buftype=
+setlocal nocindent
+setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
+setlocal cinoptions=
+setlocal cinwords=if,else,while,do,for,switch
+setlocal colorcolumn=
+setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
+setlocal commentstring=/*%s*/
+setlocal complete=.,w,b,u,t,i
+setlocal concealcursor=
+setlocal conceallevel=0
+setlocal completefunc=
+setlocal nocopyindent
+setlocal cryptmethod=
+setlocal nocursorbind
+setlocal nocursorcolumn
+setlocal nocursorline
+setlocal define=
+setlocal dictionary=
+setlocal nodiff
+setlocal equalprg=
+setlocal errorformat=
+setlocal noexpandtab
+if &filetype != 'c'
+setlocal filetype=c
+endif
+setlocal fixendofline
+setlocal foldcolumn=0
+set nofoldenable
+setlocal nofoldenable
+setlocal foldexpr=0
+setlocal foldignore=#
+setlocal foldlevel=0
+setlocal foldmarker={{{,}}}
+set foldmethod=syntax
+setlocal foldmethod=syntax
+setlocal foldminlines=1
+setlocal foldnestmax=20
+setlocal foldtext=foldtext()
+setlocal formatexpr=
+setlocal formatoptions=tcq
+setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
+setlocal formatprg=
+setlocal grepprg=
+setlocal iminsert=0
+setlocal imsearch=-1
+setlocal include=
+setlocal includeexpr=
+setlocal indentexpr=
+setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
+setlocal noinfercase
+setlocal iskeyword=@,48-57,_,192-255
+setlocal keywordprg=
+setlocal nolinebreak
+setlocal nolisp
+setlocal lispwords=
+setlocal nolist
+setlocal makeencoding=
+setlocal makeprg=
+setlocal matchpairs=(:),{:},[:]
+setlocal nomodeline
+setlocal modifiable
+setlocal nrformats=bin,octal,hex
+setlocal nonumber
+setlocal numberwidth=4
+setlocal omnifunc=
+setlocal path=
+setlocal nopreserveindent
+setlocal nopreviewwindow
+setlocal quoteescape=\\
+setlocal noreadonly
+setlocal norelativenumber
+setlocal norightleft
+setlocal rightleftcmd=search
+setlocal noscrollbind
+setlocal shiftwidth=8
+setlocal noshortname
+setlocal signcolumn=auto
+setlocal nosmartindent
+setlocal softtabstop=0
+setlocal nospell
+setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
+setlocal spellfile=
+setlocal spelllang=en
+setlocal statusline=
+setlocal suffixesadd=
+setlocal noswapfile
+setlocal synmaxcol=3000
+if &syntax != 'c'
+setlocal syntax=c
+endif
+setlocal tabstop=8
+setlocal tagcase=
+setlocal tags=
+setlocal termkey=
+setlocal termsize=
+setlocal textwidth=0
+setlocal thesaurus=
+setlocal noundofile
+setlocal undolevels=-123456
+setlocal nowinfixheight
+setlocal nowinfixwidth
+setlocal wrap
+setlocal wrapmargin=0
+let s:l = 1 - ((0 * winheight(0) + 16) / 33)
+if s:l < 1 | let s:l = 1 | endif
+exe s:l
+normal! zt
+1
+normal! 0
+tabedit kern/kdebug.c
+set splitbelow splitright
+set nosplitbelow
+set nosplitright
+wincmd t
+set winminheight=1 winheight=1 winminwidth=1 winwidth=1
+argglobal
+setlocal keymap=
+setlocal noarabic
+setlocal noautoindent
+setlocal backupcopy=
+setlocal balloonexpr=
+setlocal nobinary
+setlocal nobreakindent
+setlocal breakindentopt=
+setlocal bufhidden=
+setlocal buflisted
+setlocal buftype=
+setlocal nocindent
+setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
+setlocal cinoptions=
+setlocal cinwords=if,else,while,do,for,switch
+setlocal colorcolumn=
+setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
+setlocal commentstring=/*%s*/
+setlocal complete=.,w,b,u,t,i
+setlocal concealcursor=
+setlocal conceallevel=0
+setlocal completefunc=
+setlocal nocopyindent
+setlocal cryptmethod=
+setlocal nocursorbind
+setlocal nocursorcolumn
+setlocal nocursorline
+setlocal define=
+setlocal dictionary=
+setlocal nodiff
+setlocal equalprg=
+setlocal errorformat=
+setlocal noexpandtab
+if &filetype != 'c'
+setlocal filetype=c
+endif
+setlocal fixendofline
+setlocal foldcolumn=0
+set nofoldenable
+setlocal nofoldenable
+setlocal foldexpr=0
+setlocal foldignore=#
+setlocal foldlevel=0
+setlocal foldmarker={{{,}}}
+set foldmethod=syntax
+setlocal foldmethod=syntax
+setlocal foldminlines=1
+setlocal foldnestmax=20
+setlocal foldtext=foldtext()
+setlocal formatexpr=
+setlocal formatoptions=tcq
+setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
+setlocal formatprg=
+setlocal grepprg=
+setlocal iminsert=0
+setlocal imsearch=-1
+setlocal include=
+setlocal includeexpr=
+setlocal indentexpr=
+setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
+setlocal noinfercase
+setlocal iskeyword=@,48-57,_,192-255
+setlocal keywordprg=
+setlocal nolinebreak
+setlocal nolisp
+setlocal lispwords=
+setlocal nolist
+setlocal makeencoding=
+setlocal makeprg=
+setlocal matchpairs=(:),{:},[:]
+setlocal nomodeline
+setlocal modifiable
+setlocal nrformats=bin,octal,hex
+setlocal nonumber
+setlocal numberwidth=4
+setlocal omnifunc=
+setlocal path=
+setlocal nopreserveindent
+setlocal nopreviewwindow
+setlocal quoteescape=\\
+setlocal noreadonly
+setlocal norelativenumber
+setlocal norightleft
+setlocal rightleftcmd=search
+setlocal noscrollbind
+setlocal shiftwidth=8
+setlocal noshortname
+setlocal signcolumn=auto
+setlocal nosmartindent
+setlocal softtabstop=0
+setlocal nospell
+setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
+setlocal spellfile=
+setlocal spelllang=en
+setlocal statusline=
+setlocal suffixesadd=
+setlocal noswapfile
+setlocal synmaxcol=3000
+if &syntax != 'c'
+setlocal syntax=c
+endif
+setlocal tabstop=8
+setlocal tagcase=
+setlocal tags=
+setlocal termkey=
+setlocal termsize=
+setlocal textwidth=0
+setlocal thesaurus=
+setlocal noundofile
+setlocal undolevels=-123456
+setlocal nowinfixheight
+setlocal nowinfixwidth
+setlocal wrap
+setlocal wrapmargin=0
+let s:l = 207 - ((32 * winheight(0) + 16) / 33)
+if s:l < 1 | let s:l = 1 | endif
+exe s:l
+normal! zt
+207
+normal! 0
+tabedit inc/stab.h
+set splitbelow splitright
+set nosplitbelow
+set nosplitright
+wincmd t
+set winminheight=1 winheight=1 winminwidth=1 winwidth=1
+argglobal
+setlocal keymap=
+setlocal noarabic
+setlocal noautoindent
+setlocal backupcopy=
+setlocal balloonexpr=
+setlocal nobinary
+setlocal nobreakindent
+setlocal breakindentopt=
+setlocal bufhidden=
+setlocal buflisted
+setlocal buftype=
+setlocal nocindent
+setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
+setlocal cinoptions=
+setlocal cinwords=if,else,while,do,for,switch
+setlocal colorcolumn=
+setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
+setlocal commentstring=/*%s*/
+setlocal complete=.,w,b,u,t,i
+setlocal concealcursor=
+setlocal conceallevel=0
+setlocal completefunc=
+setlocal nocopyindent
+setlocal cryptmethod=
+setlocal nocursorbind
+setlocal nocursorcolumn
+setlocal nocursorline
+setlocal define=
+setlocal dictionary=
+setlocal nodiff
+setlocal equalprg=
+setlocal errorformat=
+setlocal noexpandtab
+if &filetype != 'cpp'
+setlocal filetype=cpp
+endif
+setlocal fixendofline
+setlocal foldcolumn=0
+set nofoldenable
+setlocal nofoldenable
+setlocal foldexpr=0
+setlocal foldignore=#
+setlocal foldlevel=0
+setlocal foldmarker={{{,}}}
+set foldmethod=syntax
+setlocal foldmethod=syntax
+setlocal foldminlines=1
+setlocal foldnestmax=20
+setlocal foldtext=foldtext()
+setlocal formatexpr=
+setlocal formatoptions=tcq
+setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
+setlocal formatprg=
+setlocal grepprg=
+setlocal iminsert=0
+setlocal imsearch=-1
+setlocal include=
+setlocal includeexpr=
+setlocal indentexpr=
+setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
+setlocal noinfercase
+setlocal iskeyword=@,48-57,_,192-255
+setlocal keywordprg=
+setlocal nolinebreak
+setlocal nolisp
+setlocal lispwords=
+setlocal nolist
+setlocal makeencoding=
+setlocal makeprg=
+setlocal matchpairs=(:),{:},[:]
+setlocal nomodeline
+setlocal modifiable
+setlocal nrformats=bin,octal,hex
+setlocal nonumber
+setlocal numberwidth=4
+setlocal omnifunc=
+setlocal path=
+setlocal nopreserveindent
+setlocal nopreviewwindow
+setlocal quoteescape=\\
+setlocal noreadonly
+setlocal norelativenumber
+setlocal norightleft
+setlocal rightleftcmd=search
+setlocal noscrollbind
+setlocal shiftwidth=8
+setlocal noshortname
+setlocal signcolumn=auto
+setlocal nosmartindent
+setlocal softtabstop=0
+setlocal nospell
+setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
+setlocal spellfile=
+setlocal spelllang=en
+setlocal statusline=
+setlocal suffixesadd=
+setlocal swapfile
+setlocal synmaxcol=3000
+if &syntax != 'cpp'
+setlocal syntax=cpp
+endif
+setlocal tabstop=8
+setlocal tagcase=
+setlocal tags=
+setlocal termkey=
+setlocal termsize=
+setlocal textwidth=0
+setlocal thesaurus=
+setlocal noundofile
+setlocal undolevels=-123456
+setlocal nowinfixheight
+setlocal nowinfixwidth
+setlocal wrap
+setlocal wrapmargin=0
+let s:l = 49 - ((30 * winheight(0) + 16) / 33)
+if s:l < 1 | let s:l = 1 | endif
+exe s:l
+normal! zt
+49
+normal! 0
+tabedit kern/entry.S
+set splitbelow splitright
+set nosplitbelow
+set nosplitright
+wincmd t
+set winminheight=1 winheight=1 winminwidth=1 winwidth=1
+argglobal
+setlocal keymap=
+setlocal noarabic
+setlocal noautoindent
+setlocal backupcopy=
+setlocal balloonexpr=
+setlocal nobinary
+setlocal nobreakindent
+setlocal breakindentopt=
+setlocal bufhidden=
+setlocal buflisted
+setlocal buftype=
+setlocal nocindent
+setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
+setlocal cinoptions=
+setlocal cinwords=if,else,while,do,for,switch
+setlocal colorcolumn=
+setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
+setlocal commentstring=/*%s*/
+setlocal complete=.,w,b,u,t,i
+setlocal concealcursor=
+setlocal conceallevel=0
+setlocal completefunc=
+setlocal nocopyindent
+setlocal cryptmethod=
+setlocal nocursorbind
+setlocal nocursorcolumn
+setlocal nocursorline
+setlocal define=
+setlocal dictionary=
+setlocal nodiff
+setlocal equalprg=
+setlocal errorformat=
+setlocal noexpandtab
+if &filetype != 'asm'
+setlocal filetype=asm
+endif
+setlocal fixendofline
+setlocal foldcolumn=0
+set nofoldenable
+setlocal nofoldenable
+setlocal foldexpr=0
+setlocal foldignore=#
+setlocal foldlevel=0
+setlocal foldmarker={{{,}}}
+set foldmethod=syntax
+setlocal foldmethod=syntax
+setlocal foldminlines=1
+setlocal foldnestmax=20
+setlocal foldtext=foldtext()
+setlocal formatexpr=
+setlocal formatoptions=tcq
+setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
+setlocal formatprg=
+setlocal grepprg=
+setlocal iminsert=0
+setlocal imsearch=-1
+setlocal include=
+setlocal includeexpr=
+setlocal indentexpr=
+setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
+setlocal noinfercase
+setlocal iskeyword=@,48-57,_,192-255
+setlocal keywordprg=
+setlocal nolinebreak
+setlocal nolisp
+setlocal lispwords=
+setlocal nolist
+setlocal makeencoding=
+setlocal makeprg=
+setlocal matchpairs=(:),{:},[:]
+setlocal nomodeline
+setlocal modifiable
+setlocal nrformats=bin,octal,hex
+setlocal nonumber
+setlocal numberwidth=4
+setlocal omnifunc=
+setlocal path=
+setlocal nopreserveindent
+setlocal nopreviewwindow
+setlocal quoteescape=\\
+setlocal noreadonly
+setlocal norelativenumber
+setlocal norightleft
+setlocal rightleftcmd=search
+setlocal noscrollbind
+setlocal shiftwidth=8
+setlocal noshortname
+setlocal signcolumn=auto
+setlocal nosmartindent
+setlocal softtabstop=0
+setlocal nospell
+setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
+setlocal spellfile=
+setlocal spelllang=en
+setlocal statusline=
+setlocal suffixesadd=
+setlocal swapfile
+setlocal synmaxcol=3000
+if &syntax != 'asm'
+setlocal syntax=asm
+endif
+setlocal tabstop=8
+setlocal tagcase=
+setlocal tags=
+setlocal termkey=
+setlocal termsize=
+setlocal textwidth=0
+setlocal thesaurus=
+setlocal noundofile
+setlocal undolevels=-123456
+setlocal nowinfixheight
+setlocal nowinfixwidth
+setlocal wrap
+setlocal wrapmargin=0
+let s:l = 74 - ((10 * winheight(0) + 16) / 33)
+if s:l < 1 | let s:l = 1 | endif
+exe s:l
+normal! zt
+74
+normal! 023|
+tabnext 2
+set stal=1
+if exists('s:wipebuf')
+  silent exe 'bwipe ' . s:wipebuf
+endif
+unlet! s:wipebuf
+set winheight=1 winwidth=20 shortmess=filnxtToO
+set winminheight=1 winminwidth=1
+let s:sx = expand("<sfile>:p:r")."x.vim"
+if file_readable(s:sx)
+  exe "source " . fnameescape(s:sx)
+endif
+let &so = s:so_save | let &siso = s:siso_save
+doautoall SessionLoadPost
+unlet SessionLoad
+" vim: set ft=vim :
-- 
2.17.1

